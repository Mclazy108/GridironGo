// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: players.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createNFLPlayer = `-- name: CreateNFLPlayer :exec
INSERT INTO nfl_players (
  player_id, first_name, last_name, full_name, position, team_id, jersey,
  height, weight, active, college, experience, draft_year, draft_round, draft_pick,
  status, image_url
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateNFLPlayerParams struct {
	PlayerID   string         `json:"player_id"`
	FirstName  string         `json:"first_name"`
	LastName   string         `json:"last_name"`
	FullName   string         `json:"full_name"`
	Position   string         `json:"position"`
	TeamID     sql.NullString `json:"team_id"`
	Jersey     sql.NullString `json:"jersey"`
	Height     sql.NullInt64  `json:"height"`
	Weight     sql.NullInt64  `json:"weight"`
	Active     bool           `json:"active"`
	College    sql.NullString `json:"college"`
	Experience sql.NullInt64  `json:"experience"`
	DraftYear  sql.NullInt64  `json:"draft_year"`
	DraftRound sql.NullInt64  `json:"draft_round"`
	DraftPick  sql.NullInt64  `json:"draft_pick"`
	Status     sql.NullString `json:"status"`
	ImageUrl   sql.NullString `json:"image_url"`
}

func (q *Queries) CreateNFLPlayer(ctx context.Context, arg CreateNFLPlayerParams) error {
	_, err := q.exec(ctx, q.createNFLPlayerStmt, createNFLPlayer,
		arg.PlayerID,
		arg.FirstName,
		arg.LastName,
		arg.FullName,
		arg.Position,
		arg.TeamID,
		arg.Jersey,
		arg.Height,
		arg.Weight,
		arg.Active,
		arg.College,
		arg.Experience,
		arg.DraftYear,
		arg.DraftRound,
		arg.DraftPick,
		arg.Status,
		arg.ImageUrl,
	)
	return err
}

const deleteNFLPlayer = `-- name: DeleteNFLPlayer :exec
DELETE FROM nfl_players
WHERE player_id = ?
`

func (q *Queries) DeleteNFLPlayer(ctx context.Context, playerID string) error {
	_, err := q.exec(ctx, q.deleteNFLPlayerStmt, deleteNFLPlayer, playerID)
	return err
}

const getActiveNFLPlayers = `-- name: GetActiveNFLPlayers :many
SELECT player_id, first_name, last_name, full_name, position, team_id, jersey, height, weight, active, college, experience, draft_year, draft_round, draft_pick, status, image_url FROM nfl_players
WHERE active = true
ORDER BY last_name, first_name ASC
`

func (q *Queries) GetActiveNFLPlayers(ctx context.Context) ([]*NflPlayer, error) {
	rows, err := q.query(ctx, q.getActiveNFLPlayersStmt, getActiveNFLPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*NflPlayer{}
	for rows.Next() {
		var i NflPlayer
		if err := rows.Scan(
			&i.PlayerID,
			&i.FirstName,
			&i.LastName,
			&i.FullName,
			&i.Position,
			&i.TeamID,
			&i.Jersey,
			&i.Height,
			&i.Weight,
			&i.Active,
			&i.College,
			&i.Experience,
			&i.DraftYear,
			&i.DraftRound,
			&i.DraftPick,
			&i.Status,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllNFLPlayers = `-- name: GetAllNFLPlayers :many
SELECT player_id, first_name, last_name, full_name, position, team_id, jersey, height, weight, active, college, experience, draft_year, draft_round, draft_pick, status, image_url FROM nfl_players
ORDER BY last_name, first_name ASC
`

func (q *Queries) GetAllNFLPlayers(ctx context.Context) ([]*NflPlayer, error) {
	rows, err := q.query(ctx, q.getAllNFLPlayersStmt, getAllNFLPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*NflPlayer{}
	for rows.Next() {
		var i NflPlayer
		if err := rows.Scan(
			&i.PlayerID,
			&i.FirstName,
			&i.LastName,
			&i.FullName,
			&i.Position,
			&i.TeamID,
			&i.Jersey,
			&i.Height,
			&i.Weight,
			&i.Active,
			&i.College,
			&i.Experience,
			&i.DraftYear,
			&i.DraftRound,
			&i.DraftPick,
			&i.Status,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNFLPlayer = `-- name: GetNFLPlayer :one
SELECT player_id, first_name, last_name, full_name, position, team_id, jersey, height, weight, active, college, experience, draft_year, draft_round, draft_pick, status, image_url FROM nfl_players
WHERE player_id = ?
`

func (q *Queries) GetNFLPlayer(ctx context.Context, playerID string) (*NflPlayer, error) {
	row := q.queryRow(ctx, q.getNFLPlayerStmt, getNFLPlayer, playerID)
	var i NflPlayer
	err := row.Scan(
		&i.PlayerID,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.Position,
		&i.TeamID,
		&i.Jersey,
		&i.Height,
		&i.Weight,
		&i.Active,
		&i.College,
		&i.Experience,
		&i.DraftYear,
		&i.DraftRound,
		&i.DraftPick,
		&i.Status,
		&i.ImageUrl,
	)
	return &i, err
}

const getPlayersByPosition = `-- name: GetPlayersByPosition :many
SELECT player_id, first_name, last_name, full_name, position, team_id, jersey, height, weight, active, college, experience, draft_year, draft_round, draft_pick, status, image_url FROM nfl_players
WHERE position = ? AND active = true
ORDER BY last_name, first_name
`

func (q *Queries) GetPlayersByPosition(ctx context.Context, position string) ([]*NflPlayer, error) {
	rows, err := q.query(ctx, q.getPlayersByPositionStmt, getPlayersByPosition, position)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*NflPlayer{}
	for rows.Next() {
		var i NflPlayer
		if err := rows.Scan(
			&i.PlayerID,
			&i.FirstName,
			&i.LastName,
			&i.FullName,
			&i.Position,
			&i.TeamID,
			&i.Jersey,
			&i.Height,
			&i.Weight,
			&i.Active,
			&i.College,
			&i.Experience,
			&i.DraftYear,
			&i.DraftRound,
			&i.DraftPick,
			&i.Status,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayersByTeam = `-- name: GetPlayersByTeam :many
SELECT player_id, first_name, last_name, full_name, position, team_id, jersey, height, weight, active, college, experience, draft_year, draft_round, draft_pick, status, image_url FROM nfl_players
WHERE team_id = ?
ORDER BY position, last_name, first_name
`

func (q *Queries) GetPlayersByTeam(ctx context.Context, teamID sql.NullString) ([]*NflPlayer, error) {
	rows, err := q.query(ctx, q.getPlayersByTeamStmt, getPlayersByTeam, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*NflPlayer{}
	for rows.Next() {
		var i NflPlayer
		if err := rows.Scan(
			&i.PlayerID,
			&i.FirstName,
			&i.LastName,
			&i.FullName,
			&i.Position,
			&i.TeamID,
			&i.Jersey,
			&i.Height,
			&i.Weight,
			&i.Active,
			&i.College,
			&i.Experience,
			&i.DraftYear,
			&i.DraftRound,
			&i.DraftPick,
			&i.Status,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchPlayers = `-- name: SearchPlayers :many
SELECT player_id, first_name, last_name, full_name, position, team_id, jersey, height, weight, active, college, experience, draft_year, draft_round, draft_pick, status, image_url FROM nfl_players
WHERE (full_name LIKE ? OR last_name LIKE ?) AND active = true
ORDER BY last_name, first_name
LIMIT 50
`

type SearchPlayersParams struct {
	FullName string `json:"full_name"`
	LastName string `json:"last_name"`
}

func (q *Queries) SearchPlayers(ctx context.Context, arg SearchPlayersParams) ([]*NflPlayer, error) {
	rows, err := q.query(ctx, q.searchPlayersStmt, searchPlayers, arg.FullName, arg.LastName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*NflPlayer{}
	for rows.Next() {
		var i NflPlayer
		if err := rows.Scan(
			&i.PlayerID,
			&i.FirstName,
			&i.LastName,
			&i.FullName,
			&i.Position,
			&i.TeamID,
			&i.Jersey,
			&i.Height,
			&i.Weight,
			&i.Active,
			&i.College,
			&i.Experience,
			&i.DraftYear,
			&i.DraftRound,
			&i.DraftPick,
			&i.Status,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNFLPlayer = `-- name: UpdateNFLPlayer :exec
UPDATE nfl_players
SET first_name = ?,
    last_name = ?,
    full_name = ?,
    position = ?,
    team_id = ?,
    jersey = ?,
    height = ?,
    weight = ?,
    active = ?,
    college = ?,
    experience = ?,
    draft_year = ?,
    draft_round = ?,
    draft_pick = ?,
    status = ?,
    image_url = ?
WHERE player_id = ?
`

type UpdateNFLPlayerParams struct {
	FirstName  string         `json:"first_name"`
	LastName   string         `json:"last_name"`
	FullName   string         `json:"full_name"`
	Position   string         `json:"position"`
	TeamID     sql.NullString `json:"team_id"`
	Jersey     sql.NullString `json:"jersey"`
	Height     sql.NullInt64  `json:"height"`
	Weight     sql.NullInt64  `json:"weight"`
	Active     bool           `json:"active"`
	College    sql.NullString `json:"college"`
	Experience sql.NullInt64  `json:"experience"`
	DraftYear  sql.NullInt64  `json:"draft_year"`
	DraftRound sql.NullInt64  `json:"draft_round"`
	DraftPick  sql.NullInt64  `json:"draft_pick"`
	Status     sql.NullString `json:"status"`
	ImageUrl   sql.NullString `json:"image_url"`
	PlayerID   string         `json:"player_id"`
}

func (q *Queries) UpdateNFLPlayer(ctx context.Context, arg UpdateNFLPlayerParams) error {
	_, err := q.exec(ctx, q.updateNFLPlayerStmt, updateNFLPlayer,
		arg.FirstName,
		arg.LastName,
		arg.FullName,
		arg.Position,
		arg.TeamID,
		arg.Jersey,
		arg.Height,
		arg.Weight,
		arg.Active,
		arg.College,
		arg.Experience,
		arg.DraftYear,
		arg.DraftRound,
		arg.DraftPick,
		arg.Status,
		arg.ImageUrl,
		arg.PlayerID,
	)
	return err
}

const upsertNFLPlayer = `-- name: UpsertNFLPlayer :exec
INSERT INTO nfl_players (
  player_id, first_name, last_name, full_name, position, team_id,
  jersey, height, weight, active, college, experience,
  draft_year, draft_round, draft_pick, status, image_url
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
) ON CONFLICT(player_id) DO UPDATE SET
  first_name = excluded.first_name,
  last_name = excluded.last_name,
  full_name = excluded.full_name,
  position = excluded.position,
  team_id = excluded.team_id,
  jersey = excluded.jersey,
  height = excluded.height,
  weight = excluded.weight,
  active = excluded.active,
  college = excluded.college,
  experience = excluded.experience,
  draft_year = excluded.draft_year,
  draft_round = excluded.draft_round,
  draft_pick = excluded.draft_pick,
  status = excluded.status,
  image_url = excluded.image_url
`

type UpsertNFLPlayerParams struct {
	PlayerID   string         `json:"player_id"`
	FirstName  string         `json:"first_name"`
	LastName   string         `json:"last_name"`
	FullName   string         `json:"full_name"`
	Position   string         `json:"position"`
	TeamID     sql.NullString `json:"team_id"`
	Jersey     sql.NullString `json:"jersey"`
	Height     sql.NullInt64  `json:"height"`
	Weight     sql.NullInt64  `json:"weight"`
	Active     bool           `json:"active"`
	College    sql.NullString `json:"college"`
	Experience sql.NullInt64  `json:"experience"`
	DraftYear  sql.NullInt64  `json:"draft_year"`
	DraftRound sql.NullInt64  `json:"draft_round"`
	DraftPick  sql.NullInt64  `json:"draft_pick"`
	Status     sql.NullString `json:"status"`
	ImageUrl   sql.NullString `json:"image_url"`
}

func (q *Queries) UpsertNFLPlayer(ctx context.Context, arg UpsertNFLPlayerParams) error {
	_, err := q.exec(ctx, q.upsertNFLPlayerStmt, upsertNFLPlayer,
		arg.PlayerID,
		arg.FirstName,
		arg.LastName,
		arg.FullName,
		arg.Position,
		arg.TeamID,
		arg.Jersey,
		arg.Height,
		arg.Weight,
		arg.Active,
		arg.College,
		arg.Experience,
		arg.DraftYear,
		arg.DraftRound,
		arg.DraftPick,
		arg.Status,
		arg.ImageUrl,
	)
	return err
}
