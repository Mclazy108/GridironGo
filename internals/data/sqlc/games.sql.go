// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: games.sql

package sqlc

import (
	"context"
)

const createGame = `-- name: CreateGame :exec
INSERT INTO nfl_games (
  event_id, date, name, short_name, season, week, away_team, home_team
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateGameParams struct {
	EventID   int64  `json:"event_id"`
	Date      string `json:"date"`
	Name      string `json:"name"`
	ShortName string `json:"short_name"`
	Season    int64  `json:"season"`
	Week      int64  `json:"week"`
	AwayTeam  string `json:"away_team"`
	HomeTeam  string `json:"home_team"`
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) error {
	_, err := q.exec(ctx, q.createGameStmt, createGame,
		arg.EventID,
		arg.Date,
		arg.Name,
		arg.ShortName,
		arg.Season,
		arg.Week,
		arg.AwayTeam,
		arg.HomeTeam,
	)
	return err
}

const deleteGame = `-- name: DeleteGame :exec
DELETE FROM nfl_games
WHERE event_id = ?
`

func (q *Queries) DeleteGame(ctx context.Context, eventID int64) error {
	_, err := q.exec(ctx, q.deleteGameStmt, deleteGame, eventID)
	return err
}

const getAllGames = `-- name: GetAllGames :many
SELECT event_id, date, name, short_name, season, week, away_team, home_team FROM nfl_games
ORDER BY date DESC
`

func (q *Queries) GetAllGames(ctx context.Context) ([]*NflGame, error) {
	rows, err := q.query(ctx, q.getAllGamesStmt, getAllGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*NflGame{}
	for rows.Next() {
		var i NflGame
		if err := rows.Scan(
			&i.EventID,
			&i.Date,
			&i.Name,
			&i.ShortName,
			&i.Season,
			&i.Week,
			&i.AwayTeam,
			&i.HomeTeam,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllGamesBySeasonAndWeek = `-- name: GetAllGamesBySeasonAndWeek :many
SELECT event_id, date, name, short_name, season, week, away_team, home_team FROM nfl_games
WHERE season = ? AND week = ?
ORDER BY date ASC
`

type GetAllGamesBySeasonAndWeekParams struct {
	Season int64 `json:"season"`
	Week   int64 `json:"week"`
}

func (q *Queries) GetAllGamesBySeasonAndWeek(ctx context.Context, arg GetAllGamesBySeasonAndWeekParams) ([]*NflGame, error) {
	rows, err := q.query(ctx, q.getAllGamesBySeasonAndWeekStmt, getAllGamesBySeasonAndWeek, arg.Season, arg.Week)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*NflGame{}
	for rows.Next() {
		var i NflGame
		if err := rows.Scan(
			&i.EventID,
			&i.Date,
			&i.Name,
			&i.ShortName,
			&i.Season,
			&i.Week,
			&i.AwayTeam,
			&i.HomeTeam,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGame = `-- name: GetGame :one
SELECT event_id, date, name, short_name, season, week, away_team, home_team FROM nfl_games
WHERE event_id = ?
`

func (q *Queries) GetGame(ctx context.Context, eventID int64) (*NflGame, error) {
	row := q.queryRow(ctx, q.getGameStmt, getGame, eventID)
	var i NflGame
	err := row.Scan(
		&i.EventID,
		&i.Date,
		&i.Name,
		&i.ShortName,
		&i.Season,
		&i.Week,
		&i.AwayTeam,
		&i.HomeTeam,
	)
	return &i, err
}

const updateGame = `-- name: UpdateGame :exec
UPDATE nfl_games
SET date = ?,
    name = ?,
    short_name = ?,
    season = ?,
    week = ?,
    away_team = ?,
    home_team = ?
WHERE event_id = ?
`

type UpdateGameParams struct {
	Date      string `json:"date"`
	Name      string `json:"name"`
	ShortName string `json:"short_name"`
	Season    int64  `json:"season"`
	Week      int64  `json:"week"`
	AwayTeam  string `json:"away_team"`
	HomeTeam  string `json:"home_team"`
	EventID   int64  `json:"event_id"`
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) error {
	_, err := q.exec(ctx, q.updateGameStmt, updateGame,
		arg.Date,
		arg.Name,
		arg.ShortName,
		arg.Season,
		arg.Week,
		arg.AwayTeam,
		arg.HomeTeam,
		arg.EventID,
	)
	return err
}

const upsertGame = `-- name: UpsertGame :exec
INSERT INTO nfl_games (
  event_id, date, name, short_name, season, week, away_team, home_team
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?
) ON CONFLICT(event_id) DO UPDATE SET
  date = excluded.date,
  name = excluded.name,
  short_name = excluded.short_name,
  season = excluded.season,
  week = excluded.week,
  away_team = excluded.away_team,
  home_team = excluded.home_team
`

type UpsertGameParams struct {
	EventID   int64  `json:"event_id"`
	Date      string `json:"date"`
	Name      string `json:"name"`
	ShortName string `json:"short_name"`
	Season    int64  `json:"season"`
	Week      int64  `json:"week"`
	AwayTeam  string `json:"away_team"`
	HomeTeam  string `json:"home_team"`
}

func (q *Queries) UpsertGame(ctx context.Context, arg UpsertGameParams) error {
	_, err := q.exec(ctx, q.upsertGameStmt, upsertGame,
		arg.EventID,
		arg.Date,
		arg.Name,
		arg.ShortName,
		arg.Season,
		arg.Week,
		arg.AwayTeam,
		arg.HomeTeam,
	)
	return err
}
