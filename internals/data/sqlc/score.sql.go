// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: score.sql

package sqlc

import (
	"context"
	"database/sql"
)

const calculatePlayerFantasyPoints = `-- name: CalculatePlayerFantasyPoints :one
WITH player_stats_data AS (
    SELECT
        ps.id, ps.player_id, ps.game_id, ps.season_id, ps.week, ps.passing_attempts, ps.passing_completions, ps.passing_yards, ps.passing_touchdowns, ps.passing_interceptions, ps.rushing_attempts, ps.rushing_yards, ps.rushing_touchdowns, ps.targets, ps.receptions, ps.receiving_yards, ps.receiving_touchdowns, ps.field_goals_made, ps.field_goals_attempted, ps.extra_points_made, ps.extra_points_attempted, ps.sacks, ps.interceptions, ps.fumble_recoveries, ps.defensive_touchdowns, ps.safeties, ps.fumbles_lost, ps.two_point_conversions,
        fsr.passing_yards_per_point,
        fsr.passing_touchdown_points,
        fsr.passing_interception_points,
        fsr.rushing_yards_per_point,
        fsr.rushing_touchdown_points,
        fsr.receiving_yards_per_point,
        fsr.receiving_touchdown_points,
        fsr.reception_points,
        fsr.field_goal_0_39_points,
        fsr.field_goal_40_49_points,
        fsr.field_goal_50_plus_points,
        fsr.extra_point_points,
        fsr.sack_points,
        fsr.interception_points,
        fsr.fumble_recovery_points,
        fsr.defensive_touchdown_points,
        fsr.safety_points,
        fsr.two_point_conversion_points,
        fsr.fumble_lost_points
    FROM player_stats ps
    CROSS JOIN fantasy_scoring_rules fsr
    WHERE ps.player_id = ? AND ps.season_id = ? AND ps.week = ? AND fsr.league_id = ?
)
SELECT
    -- Passing points
    (passing_yards / passing_yards_per_point) +
    (passing_touchdowns * passing_touchdown_points) +
    (passing_interceptions * passing_interception_points) +
    
    -- Rushing points
    (rushing_yards / rushing_yards_per_point) +
    (rushing_touchdowns * rushing_touchdown_points) +
    
    -- Receiving points
    (receiving_yards / receiving_yards_per_point) +
    (receiving_touchdowns * receiving_touchdown_points) +
    (receptions * reception_points) +
    
    -- Kicking points (simplified - would need more data for FG distance)
    (field_goals_made * field_goal_0_39_points) +
    (extra_points_made * extra_point_points) +
    
    -- Defense points
    (sacks * sack_points) +
    (interceptions * interception_points) +
    (fumble_recoveries * fumble_recovery_points) +
    (defensive_touchdowns * defensive_touchdown_points) +
    (safeties * safety_points) +
    
    -- Misc points
    (two_point_conversions * two_point_conversion_points) +
    (fumbles_lost * fumble_lost_points) AS fantasy_points
FROM player_stats_data
`

type CalculatePlayerFantasyPointsParams struct {
	PlayerID int64 `json:"player_id"`
	SeasonID int64 `json:"season_id"`
	Week     int64 `json:"week"`
	LeagueID int64 `json:"league_id"`
}

func (q *Queries) CalculatePlayerFantasyPoints(ctx context.Context, arg CalculatePlayerFantasyPointsParams) (int64, error) {
	row := q.queryRow(ctx, q.calculatePlayerFantasyPointsStmt, calculatePlayerFantasyPoints,
		arg.PlayerID,
		arg.SeasonID,
		arg.Week,
		arg.LeagueID,
	)
	var fantasy_points int64
	err := row.Scan(&fantasy_points)
	return fantasy_points, err
}

const createPlayerStats = `-- name: CreatePlayerStats :one
INSERT INTO player_stats (
    player_id,
    game_id,
    season_id,
    week,
    passing_attempts,
    passing_completions,
    passing_yards,
    passing_touchdowns,
    passing_interceptions,
    rushing_attempts,
    rushing_yards,
    rushing_touchdowns,
    targets,
    receptions,
    receiving_yards,
    receiving_touchdowns,
    field_goals_made,
    field_goals_attempted,
    extra_points_made,
    extra_points_attempted,
    sacks,
    interceptions,
    fumble_recoveries,
    defensive_touchdowns,
    safeties,
    fumbles_lost,
    two_point_conversions
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
    ?, ?, ?, ?, ?, ?, ?
)
RETURNING id
`

type CreatePlayerStatsParams struct {
	PlayerID             int64           `json:"player_id"`
	GameID               int64           `json:"game_id"`
	SeasonID             int64           `json:"season_id"`
	Week                 int64           `json:"week"`
	PassingAttempts      sql.NullInt64   `json:"passing_attempts"`
	PassingCompletions   sql.NullInt64   `json:"passing_completions"`
	PassingYards         sql.NullInt64   `json:"passing_yards"`
	PassingTouchdowns    sql.NullInt64   `json:"passing_touchdowns"`
	PassingInterceptions sql.NullInt64   `json:"passing_interceptions"`
	RushingAttempts      sql.NullInt64   `json:"rushing_attempts"`
	RushingYards         sql.NullInt64   `json:"rushing_yards"`
	RushingTouchdowns    sql.NullInt64   `json:"rushing_touchdowns"`
	Targets              sql.NullInt64   `json:"targets"`
	Receptions           sql.NullInt64   `json:"receptions"`
	ReceivingYards       sql.NullInt64   `json:"receiving_yards"`
	ReceivingTouchdowns  sql.NullInt64   `json:"receiving_touchdowns"`
	FieldGoalsMade       sql.NullInt64   `json:"field_goals_made"`
	FieldGoalsAttempted  sql.NullInt64   `json:"field_goals_attempted"`
	ExtraPointsMade      sql.NullInt64   `json:"extra_points_made"`
	ExtraPointsAttempted sql.NullInt64   `json:"extra_points_attempted"`
	Sacks                sql.NullFloat64 `json:"sacks"`
	Interceptions        sql.NullInt64   `json:"interceptions"`
	FumbleRecoveries     sql.NullInt64   `json:"fumble_recoveries"`
	DefensiveTouchdowns  sql.NullInt64   `json:"defensive_touchdowns"`
	Safeties             sql.NullInt64   `json:"safeties"`
	FumblesLost          sql.NullInt64   `json:"fumbles_lost"`
	TwoPointConversions  sql.NullInt64   `json:"two_point_conversions"`
}

func (q *Queries) CreatePlayerStats(ctx context.Context, arg CreatePlayerStatsParams) (int64, error) {
	row := q.queryRow(ctx, q.createPlayerStatsStmt, createPlayerStats,
		arg.PlayerID,
		arg.GameID,
		arg.SeasonID,
		arg.Week,
		arg.PassingAttempts,
		arg.PassingCompletions,
		arg.PassingYards,
		arg.PassingTouchdowns,
		arg.PassingInterceptions,
		arg.RushingAttempts,
		arg.RushingYards,
		arg.RushingTouchdowns,
		arg.Targets,
		arg.Receptions,
		arg.ReceivingYards,
		arg.ReceivingTouchdowns,
		arg.FieldGoalsMade,
		arg.FieldGoalsAttempted,
		arg.ExtraPointsMade,
		arg.ExtraPointsAttempted,
		arg.Sacks,
		arg.Interceptions,
		arg.FumbleRecoveries,
		arg.DefensiveTouchdowns,
		arg.Safeties,
		arg.FumblesLost,
		arg.TwoPointConversions,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getPlayerStatsByGame = `-- name: GetPlayerStatsByGame :one
SELECT id, player_id, game_id, season_id, week, passing_attempts, passing_completions, passing_yards, passing_touchdowns, passing_interceptions, rushing_attempts, rushing_yards, rushing_touchdowns, targets, receptions, receiving_yards, receiving_touchdowns, field_goals_made, field_goals_attempted, extra_points_made, extra_points_attempted, sacks, interceptions, fumble_recoveries, defensive_touchdowns, safeties, fumbles_lost, two_point_conversions FROM player_stats
WHERE player_id = ? AND game_id = ?
`

type GetPlayerStatsByGameParams struct {
	PlayerID int64 `json:"player_id"`
	GameID   int64 `json:"game_id"`
}

func (q *Queries) GetPlayerStatsByGame(ctx context.Context, arg GetPlayerStatsByGameParams) (*PlayerStat, error) {
	row := q.queryRow(ctx, q.getPlayerStatsByGameStmt, getPlayerStatsByGame, arg.PlayerID, arg.GameID)
	var i PlayerStat
	err := row.Scan(
		&i.ID,
		&i.PlayerID,
		&i.GameID,
		&i.SeasonID,
		&i.Week,
		&i.PassingAttempts,
		&i.PassingCompletions,
		&i.PassingYards,
		&i.PassingTouchdowns,
		&i.PassingInterceptions,
		&i.RushingAttempts,
		&i.RushingYards,
		&i.RushingTouchdowns,
		&i.Targets,
		&i.Receptions,
		&i.ReceivingYards,
		&i.ReceivingTouchdowns,
		&i.FieldGoalsMade,
		&i.FieldGoalsAttempted,
		&i.ExtraPointsMade,
		&i.ExtraPointsAttempted,
		&i.Sacks,
		&i.Interceptions,
		&i.FumbleRecoveries,
		&i.DefensiveTouchdowns,
		&i.Safeties,
		&i.FumblesLost,
		&i.TwoPointConversions,
	)
	return &i, err
}

const getPlayerStatsByWeek = `-- name: GetPlayerStatsByWeek :many
SELECT 
    ps.id, ps.player_id, ps.game_id, ps.season_id, ps.week, ps.passing_attempts, ps.passing_completions, ps.passing_yards, ps.passing_touchdowns, ps.passing_interceptions, ps.rushing_attempts, ps.rushing_yards, ps.rushing_touchdowns, ps.targets, ps.receptions, ps.receiving_yards, ps.receiving_touchdowns, ps.field_goals_made, ps.field_goals_attempted, ps.extra_points_made, ps.extra_points_attempted, ps.sacks, ps.interceptions, ps.fumble_recoveries, ps.defensive_touchdowns, ps.safeties, ps.fumbles_lost, ps.two_point_conversions,
    p.name as player_name,
    p.position as player_position,
    ht.name as home_team_name,
    at.name as away_team_name
FROM player_stats ps
JOIN nfl_players p ON ps.player_id = p.id
JOIN nfl_games g ON ps.game_id = g.id
JOIN nfl_teams ht ON g.home_team_id = ht.id
JOIN nfl_teams at ON g.away_team_id = at.id
WHERE ps.season_id = ? AND ps.week = ? AND ps.player_id = ?
`

type GetPlayerStatsByWeekParams struct {
	SeasonID int64 `json:"season_id"`
	Week     int64 `json:"week"`
	PlayerID int64 `json:"player_id"`
}

type GetPlayerStatsByWeekRow struct {
	ID                   int64           `json:"id"`
	PlayerID             int64           `json:"player_id"`
	GameID               int64           `json:"game_id"`
	SeasonID             int64           `json:"season_id"`
	Week                 int64           `json:"week"`
	PassingAttempts      sql.NullInt64   `json:"passing_attempts"`
	PassingCompletions   sql.NullInt64   `json:"passing_completions"`
	PassingYards         sql.NullInt64   `json:"passing_yards"`
	PassingTouchdowns    sql.NullInt64   `json:"passing_touchdowns"`
	PassingInterceptions sql.NullInt64   `json:"passing_interceptions"`
	RushingAttempts      sql.NullInt64   `json:"rushing_attempts"`
	RushingYards         sql.NullInt64   `json:"rushing_yards"`
	RushingTouchdowns    sql.NullInt64   `json:"rushing_touchdowns"`
	Targets              sql.NullInt64   `json:"targets"`
	Receptions           sql.NullInt64   `json:"receptions"`
	ReceivingYards       sql.NullInt64   `json:"receiving_yards"`
	ReceivingTouchdowns  sql.NullInt64   `json:"receiving_touchdowns"`
	FieldGoalsMade       sql.NullInt64   `json:"field_goals_made"`
	FieldGoalsAttempted  sql.NullInt64   `json:"field_goals_attempted"`
	ExtraPointsMade      sql.NullInt64   `json:"extra_points_made"`
	ExtraPointsAttempted sql.NullInt64   `json:"extra_points_attempted"`
	Sacks                sql.NullFloat64 `json:"sacks"`
	Interceptions        sql.NullInt64   `json:"interceptions"`
	FumbleRecoveries     sql.NullInt64   `json:"fumble_recoveries"`
	DefensiveTouchdowns  sql.NullInt64   `json:"defensive_touchdowns"`
	Safeties             sql.NullInt64   `json:"safeties"`
	FumblesLost          sql.NullInt64   `json:"fumbles_lost"`
	TwoPointConversions  sql.NullInt64   `json:"two_point_conversions"`
	PlayerName           string          `json:"player_name"`
	PlayerPosition       string          `json:"player_position"`
	HomeTeamName         string          `json:"home_team_name"`
	AwayTeamName         string          `json:"away_team_name"`
}

func (q *Queries) GetPlayerStatsByWeek(ctx context.Context, arg GetPlayerStatsByWeekParams) ([]*GetPlayerStatsByWeekRow, error) {
	rows, err := q.query(ctx, q.getPlayerStatsByWeekStmt, getPlayerStatsByWeek, arg.SeasonID, arg.Week, arg.PlayerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetPlayerStatsByWeekRow{}
	for rows.Next() {
		var i GetPlayerStatsByWeekRow
		if err := rows.Scan(
			&i.ID,
			&i.PlayerID,
			&i.GameID,
			&i.SeasonID,
			&i.Week,
			&i.PassingAttempts,
			&i.PassingCompletions,
			&i.PassingYards,
			&i.PassingTouchdowns,
			&i.PassingInterceptions,
			&i.RushingAttempts,
			&i.RushingYards,
			&i.RushingTouchdowns,
			&i.Targets,
			&i.Receptions,
			&i.ReceivingYards,
			&i.ReceivingTouchdowns,
			&i.FieldGoalsMade,
			&i.FieldGoalsAttempted,
			&i.ExtraPointsMade,
			&i.ExtraPointsAttempted,
			&i.Sacks,
			&i.Interceptions,
			&i.FumbleRecoveries,
			&i.DefensiveTouchdowns,
			&i.Safeties,
			&i.FumblesLost,
			&i.TwoPointConversions,
			&i.PlayerName,
			&i.PlayerPosition,
			&i.HomeTeamName,
			&i.AwayTeamName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamScoreForWeek = `-- name: GetTeamScoreForWeek :one
SELECT 
    ft.id as team_id,
    ft.name as team_name,
    SUM(fps.points) as total_points
FROM fantasy_player_scores fps
JOIN fantasy_teams ft ON fps.team_id = ft.id
JOIN fantasy_rosters fr ON fps.player_id = fr.player_id AND fr.team_id = ft.id
WHERE fps.league_id = ? AND fps.week = ? AND fps.season_id = ? AND fr.is_starter = 1 AND ft.id = ?
GROUP BY ft.id, ft.name
`

type GetTeamScoreForWeekParams struct {
	LeagueID int64 `json:"league_id"`
	Week     int64 `json:"week"`
	SeasonID int64 `json:"season_id"`
	ID       int64 `json:"id"`
}

type GetTeamScoreForWeekRow struct {
	TeamID      int64           `json:"team_id"`
	TeamName    string          `json:"team_name"`
	TotalPoints sql.NullFloat64 `json:"total_points"`
}

func (q *Queries) GetTeamScoreForWeek(ctx context.Context, arg GetTeamScoreForWeekParams) (*GetTeamScoreForWeekRow, error) {
	row := q.queryRow(ctx, q.getTeamScoreForWeekStmt, getTeamScoreForWeek,
		arg.LeagueID,
		arg.Week,
		arg.SeasonID,
		arg.ID,
	)
	var i GetTeamScoreForWeekRow
	err := row.Scan(&i.TeamID, &i.TeamName, &i.TotalPoints)
	return &i, err
}

const getTeamsForScoringUpdate = `-- name: GetTeamsForScoringUpdate :many
SELECT 
    ft.id as team_id,
    fm.id as matchup_id,
    fm.week,
    CASE WHEN fm.home_team_id = ft.id THEN 'home' ELSE 'away' END as home_or_away
FROM fantasy_teams ft
JOIN fantasy_matchups fm ON (fm.home_team_id = ft.id OR fm.away_team_id = ft.id)
WHERE fm.league_id = ? AND fm.week = ? AND fm.completed = 0
`

type GetTeamsForScoringUpdateParams struct {
	LeagueID int64 `json:"league_id"`
	Week     int64 `json:"week"`
}

type GetTeamsForScoringUpdateRow struct {
	TeamID     int64  `json:"team_id"`
	MatchupID  int64  `json:"matchup_id"`
	Week       int64  `json:"week"`
	HomeOrAway string `json:"home_or_away"`
}

func (q *Queries) GetTeamsForScoringUpdate(ctx context.Context, arg GetTeamsForScoringUpdateParams) ([]*GetTeamsForScoringUpdateRow, error) {
	rows, err := q.query(ctx, q.getTeamsForScoringUpdateStmt, getTeamsForScoringUpdate, arg.LeagueID, arg.Week)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetTeamsForScoringUpdateRow{}
	for rows.Next() {
		var i GetTeamsForScoringUpdateRow
		if err := rows.Scan(
			&i.TeamID,
			&i.MatchupID,
			&i.Week,
			&i.HomeOrAway,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopScorersForSeason = `-- name: GetTopScorersForSeason :many
SELECT 
    p.id as player_id,
    p.name as player_name,
    p.position as player_position,
    t.abbreviation as team_abbreviation,
    SUM(fps.points) as total_fantasy_points,
    AVG(fps.points) as avg_fantasy_points,
    COUNT(fps.week) as games_played
FROM fantasy_player_scores fps
JOIN nfl_players p ON fps.player_id = p.id
LEFT JOIN nfl_teams t ON p.team_id = t.id
WHERE fps.league_id = ? AND fps.season_id = ?
GROUP BY p.id, p.name, p.position, t.abbreviation
ORDER BY total_fantasy_points DESC
LIMIT ?
`

type GetTopScorersForSeasonParams struct {
	LeagueID int64 `json:"league_id"`
	SeasonID int64 `json:"season_id"`
	Limit    int64 `json:"limit"`
}

type GetTopScorersForSeasonRow struct {
	PlayerID           int64           `json:"player_id"`
	PlayerName         string          `json:"player_name"`
	PlayerPosition     string          `json:"player_position"`
	TeamAbbreviation   sql.NullString  `json:"team_abbreviation"`
	TotalFantasyPoints sql.NullFloat64 `json:"total_fantasy_points"`
	AvgFantasyPoints   sql.NullFloat64 `json:"avg_fantasy_points"`
	GamesPlayed        int64           `json:"games_played"`
}

func (q *Queries) GetTopScorersForSeason(ctx context.Context, arg GetTopScorersForSeasonParams) ([]*GetTopScorersForSeasonRow, error) {
	rows, err := q.query(ctx, q.getTopScorersForSeasonStmt, getTopScorersForSeason, arg.LeagueID, arg.SeasonID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetTopScorersForSeasonRow{}
	for rows.Next() {
		var i GetTopScorersForSeasonRow
		if err := rows.Scan(
			&i.PlayerID,
			&i.PlayerName,
			&i.PlayerPosition,
			&i.TeamAbbreviation,
			&i.TotalFantasyPoints,
			&i.AvgFantasyPoints,
			&i.GamesPlayed,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopScorersForWeek = `-- name: GetTopScorersForWeek :many
SELECT 
    fps.player_id,
    p.name as player_name,
    p.position as player_position,
    t.abbreviation as team_abbreviation,
    fps.points as fantasy_points,
    fps.team_id as fantasy_team_id,
    ft.name as fantasy_team_name
FROM fantasy_player_scores fps
JOIN nfl_players p ON fps.player_id = p.id
LEFT JOIN nfl_teams t ON p.team_id = t.id
LEFT JOIN fantasy_teams ft ON fps.team_id = ft.id
WHERE fps.league_id = ? AND fps.week = ? AND fps.season_id = ?
ORDER BY fps.points DESC
LIMIT ?
`

type GetTopScorersForWeekParams struct {
	LeagueID int64 `json:"league_id"`
	Week     int64 `json:"week"`
	SeasonID int64 `json:"season_id"`
	Limit    int64 `json:"limit"`
}

type GetTopScorersForWeekRow struct {
	PlayerID         int64           `json:"player_id"`
	PlayerName       string          `json:"player_name"`
	PlayerPosition   string          `json:"player_position"`
	TeamAbbreviation sql.NullString  `json:"team_abbreviation"`
	FantasyPoints    sql.NullFloat64 `json:"fantasy_points"`
	FantasyTeamID    sql.NullInt64   `json:"fantasy_team_id"`
	FantasyTeamName  sql.NullString  `json:"fantasy_team_name"`
}

func (q *Queries) GetTopScorersForWeek(ctx context.Context, arg GetTopScorersForWeekParams) ([]*GetTopScorersForWeekRow, error) {
	rows, err := q.query(ctx, q.getTopScorersForWeekStmt, getTopScorersForWeek,
		arg.LeagueID,
		arg.Week,
		arg.SeasonID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetTopScorersForWeekRow{}
	for rows.Next() {
		var i GetTopScorersForWeekRow
		if err := rows.Scan(
			&i.PlayerID,
			&i.PlayerName,
			&i.PlayerPosition,
			&i.TeamAbbreviation,
			&i.FantasyPoints,
			&i.FantasyTeamID,
			&i.FantasyTeamName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayerStats = `-- name: UpdatePlayerStats :exec
UPDATE player_stats
SET
    passing_attempts = ?,
    passing_completions = ?,
    passing_yards = ?,
    passing_touchdowns = ?,
    passing_interceptions = ?,
    rushing_attempts = ?,
    rushing_yards = ?,
    rushing_touchdowns = ?,
    targets = ?,
    receptions = ?,
    receiving_yards = ?,
    receiving_touchdowns = ?,
    field_goals_made = ?,
    field_goals_attempted = ?,
    extra_points_made = ?,
    extra_points_attempted = ?,
    sacks = ?,
    interceptions = ?,
    fumble_recoveries = ?,
    defensive_touchdowns = ?,
    safeties = ?,
    fumbles_lost = ?,
    two_point_conversions = ?
WHERE id = ?
`

type UpdatePlayerStatsParams struct {
	PassingAttempts      sql.NullInt64   `json:"passing_attempts"`
	PassingCompletions   sql.NullInt64   `json:"passing_completions"`
	PassingYards         sql.NullInt64   `json:"passing_yards"`
	PassingTouchdowns    sql.NullInt64   `json:"passing_touchdowns"`
	PassingInterceptions sql.NullInt64   `json:"passing_interceptions"`
	RushingAttempts      sql.NullInt64   `json:"rushing_attempts"`
	RushingYards         sql.NullInt64   `json:"rushing_yards"`
	RushingTouchdowns    sql.NullInt64   `json:"rushing_touchdowns"`
	Targets              sql.NullInt64   `json:"targets"`
	Receptions           sql.NullInt64   `json:"receptions"`
	ReceivingYards       sql.NullInt64   `json:"receiving_yards"`
	ReceivingTouchdowns  sql.NullInt64   `json:"receiving_touchdowns"`
	FieldGoalsMade       sql.NullInt64   `json:"field_goals_made"`
	FieldGoalsAttempted  sql.NullInt64   `json:"field_goals_attempted"`
	ExtraPointsMade      sql.NullInt64   `json:"extra_points_made"`
	ExtraPointsAttempted sql.NullInt64   `json:"extra_points_attempted"`
	Sacks                sql.NullFloat64 `json:"sacks"`
	Interceptions        sql.NullInt64   `json:"interceptions"`
	FumbleRecoveries     sql.NullInt64   `json:"fumble_recoveries"`
	DefensiveTouchdowns  sql.NullInt64   `json:"defensive_touchdowns"`
	Safeties             sql.NullInt64   `json:"safeties"`
	FumblesLost          sql.NullInt64   `json:"fumbles_lost"`
	TwoPointConversions  sql.NullInt64   `json:"two_point_conversions"`
	ID                   int64           `json:"id"`
}

func (q *Queries) UpdatePlayerStats(ctx context.Context, arg UpdatePlayerStatsParams) error {
	_, err := q.exec(ctx, q.updatePlayerStatsStmt, updatePlayerStats,
		arg.PassingAttempts,
		arg.PassingCompletions,
		arg.PassingYards,
		arg.PassingTouchdowns,
		arg.PassingInterceptions,
		arg.RushingAttempts,
		arg.RushingYards,
		arg.RushingTouchdowns,
		arg.Targets,
		arg.Receptions,
		arg.ReceivingYards,
		arg.ReceivingTouchdowns,
		arg.FieldGoalsMade,
		arg.FieldGoalsAttempted,
		arg.ExtraPointsMade,
		arg.ExtraPointsAttempted,
		arg.Sacks,
		arg.Interceptions,
		arg.FumbleRecoveries,
		arg.DefensiveTouchdowns,
		arg.Safeties,
		arg.FumblesLost,
		arg.TwoPointConversions,
		arg.ID,
	)
	return err
}
