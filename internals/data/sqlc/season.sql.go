// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: season.sql

package data

import (
	"context"
	"database/sql"
)

const createNFLGame = `-- name: CreateNFLGame :one
INSERT INTO nfl_games (
    season_id,
    week,
    home_team_id,
    away_team_id,
    home_score,
    away_score,
    game_date,
    game_time,
    status
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id
`

type CreateNFLGameParams struct {
	SeasonID   int64          `json:"season_id"`
	Week       int64          `json:"week"`
	HomeTeamID int64          `json:"home_team_id"`
	AwayTeamID int64          `json:"away_team_id"`
	HomeScore  sql.NullInt64  `json:"home_score"`
	AwayScore  sql.NullInt64  `json:"away_score"`
	GameDate   string         `json:"game_date"`
	GameTime   string         `json:"game_time"`
	Status     sql.NullString `json:"status"`
}

func (q *Queries) CreateNFLGame(ctx context.Context, arg CreateNFLGameParams) (int64, error) {
	row := q.queryRow(ctx, q.createNFLGameStmt, createNFLGame,
		arg.SeasonID,
		arg.Week,
		arg.HomeTeamID,
		arg.AwayTeamID,
		arg.HomeScore,
		arg.AwayScore,
		arg.GameDate,
		arg.GameTime,
		arg.Status,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createSeason = `-- name: CreateSeason :one
INSERT INTO seasons (
    year,
    start_date,
    end_date,
    current
) VALUES (?, ?, ?, ?)
RETURNING id
`

type CreateSeasonParams struct {
	Year      int64         `json:"year"`
	StartDate string        `json:"start_date"`
	EndDate   string        `json:"end_date"`
	Current   sql.NullInt64 `json:"current"`
}

func (q *Queries) CreateSeason(ctx context.Context, arg CreateSeasonParams) (int64, error) {
	row := q.queryRow(ctx, q.createSeasonStmt, createSeason,
		arg.Year,
		arg.StartDate,
		arg.EndDate,
		arg.Current,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getAllSeasons = `-- name: GetAllSeasons :many
SELECT id, year, start_date, end_date, current
FROM seasons
ORDER BY year DESC
`

func (q *Queries) GetAllSeasons(ctx context.Context) ([]*Season, error) {
	rows, err := q.query(ctx, q.getAllSeasonsStmt, getAllSeasons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Season{}
	for rows.Next() {
		var i Season
		if err := rows.Scan(
			&i.ID,
			&i.Year,
			&i.StartDate,
			&i.EndDate,
			&i.Current,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCurrentSeason = `-- name: GetCurrentSeason :one
SELECT id, year, start_date, end_date, current
FROM seasons
WHERE current = 1
LIMIT 1
`

func (q *Queries) GetCurrentSeason(ctx context.Context) (*Season, error) {
	row := q.queryRow(ctx, q.getCurrentSeasonStmt, getCurrentSeason)
	var i Season
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.StartDate,
		&i.EndDate,
		&i.Current,
	)
	return &i, err
}

const getHistoricalPlayerStats = `-- name: GetHistoricalPlayerStats :many
SELECT 
    s.year,
    COUNT(DISTINCT ps.game_id) as games_played,
    SUM(ps.passing_yards) as passing_yards,
    SUM(ps.passing_touchdowns) as passing_touchdowns,
    SUM(ps.rushing_yards) as rushing_yards,
    SUM(ps.rushing_touchdowns) as rushing_touchdowns,
    SUM(ps.receptions) as receptions,
    SUM(ps.receiving_yards) as receiving_yards,
    SUM(ps.receiving_touchdowns) as receiving_touchdowns
FROM player_stats ps
JOIN seasons s ON ps.season_id = s.id
WHERE ps.player_id = ?
GROUP BY s.year
ORDER BY s.year DESC
`

type GetHistoricalPlayerStatsRow struct {
	Year                int64           `json:"year"`
	GamesPlayed         int64           `json:"games_played"`
	PassingYards        sql.NullFloat64 `json:"passing_yards"`
	PassingTouchdowns   sql.NullFloat64 `json:"passing_touchdowns"`
	RushingYards        sql.NullFloat64 `json:"rushing_yards"`
	RushingTouchdowns   sql.NullFloat64 `json:"rushing_touchdowns"`
	Receptions          sql.NullFloat64 `json:"receptions"`
	ReceivingYards      sql.NullFloat64 `json:"receiving_yards"`
	ReceivingTouchdowns sql.NullFloat64 `json:"receiving_touchdowns"`
}

func (q *Queries) GetHistoricalPlayerStats(ctx context.Context, playerID int64) ([]*GetHistoricalPlayerStatsRow, error) {
	rows, err := q.query(ctx, q.getHistoricalPlayerStatsStmt, getHistoricalPlayerStats, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetHistoricalPlayerStatsRow{}
	for rows.Next() {
		var i GetHistoricalPlayerStatsRow
		if err := rows.Scan(
			&i.Year,
			&i.GamesPlayed,
			&i.PassingYards,
			&i.PassingTouchdowns,
			&i.RushingYards,
			&i.RushingTouchdowns,
			&i.Receptions,
			&i.ReceivingYards,
			&i.ReceivingTouchdowns,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNFLScheduleForSeason = `-- name: GetNFLScheduleForSeason :many
SELECT 
    g.id,
    g.week,
    g.home_team_id,
    ht.name as home_team_name,
    ht.abbreviation as home_team_abbr,
    g.away_team_id,
    at.name as away_team_name,
    at.abbreviation as away_team_abbr,
    g.home_score,
    g.away_score,
    g.game_date,
    g.game_time,
    g.status
FROM nfl_games g
JOIN nfl_teams ht ON g.home_team_id = ht.id
JOIN nfl_teams at ON g.away_team_id = at.id
WHERE g.season_id = ?
ORDER BY g.week, g.game_date, g.game_time
`

type GetNFLScheduleForSeasonRow struct {
	ID           int64          `json:"id"`
	Week         int64          `json:"week"`
	HomeTeamID   int64          `json:"home_team_id"`
	HomeTeamName string         `json:"home_team_name"`
	HomeTeamAbbr string         `json:"home_team_abbr"`
	AwayTeamID   int64          `json:"away_team_id"`
	AwayTeamName string         `json:"away_team_name"`
	AwayTeamAbbr string         `json:"away_team_abbr"`
	HomeScore    sql.NullInt64  `json:"home_score"`
	AwayScore    sql.NullInt64  `json:"away_score"`
	GameDate     string         `json:"game_date"`
	GameTime     string         `json:"game_time"`
	Status       sql.NullString `json:"status"`
}

func (q *Queries) GetNFLScheduleForSeason(ctx context.Context, seasonID int64) ([]*GetNFLScheduleForSeasonRow, error) {
	rows, err := q.query(ctx, q.getNFLScheduleForSeasonStmt, getNFLScheduleForSeason, seasonID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetNFLScheduleForSeasonRow{}
	for rows.Next() {
		var i GetNFLScheduleForSeasonRow
		if err := rows.Scan(
			&i.ID,
			&i.Week,
			&i.HomeTeamID,
			&i.HomeTeamName,
			&i.HomeTeamAbbr,
			&i.AwayTeamID,
			&i.AwayTeamName,
			&i.AwayTeamAbbr,
			&i.HomeScore,
			&i.AwayScore,
			&i.GameDate,
			&i.GameTime,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNFLScheduleForWeek = `-- name: GetNFLScheduleForWeek :many
SELECT 
    g.id,
    g.week,
    g.home_team_id,
    ht.name as home_team_name,
    ht.abbreviation as home_team_abbr,
    g.away_team_id,
    at.name as away_team_name,
    at.abbreviation as away_team_abbr,
    g.home_score,
    g.away_score,
    g.game_date,
    g.game_time,
    g.status
FROM nfl_games g
JOIN nfl_teams ht ON g.home_team_id = ht.id
JOIN nfl_teams at ON g.away_team_id = at.id
WHERE g.season_id = ? AND g.week = ?
ORDER BY g.game_date, g.game_time
`

type GetNFLScheduleForWeekParams struct {
	SeasonID int64 `json:"season_id"`
	Week     int64 `json:"week"`
}

type GetNFLScheduleForWeekRow struct {
	ID           int64          `json:"id"`
	Week         int64          `json:"week"`
	HomeTeamID   int64          `json:"home_team_id"`
	HomeTeamName string         `json:"home_team_name"`
	HomeTeamAbbr string         `json:"home_team_abbr"`
	AwayTeamID   int64          `json:"away_team_id"`
	AwayTeamName string         `json:"away_team_name"`
	AwayTeamAbbr string         `json:"away_team_abbr"`
	HomeScore    sql.NullInt64  `json:"home_score"`
	AwayScore    sql.NullInt64  `json:"away_score"`
	GameDate     string         `json:"game_date"`
	GameTime     string         `json:"game_time"`
	Status       sql.NullString `json:"status"`
}

func (q *Queries) GetNFLScheduleForWeek(ctx context.Context, arg GetNFLScheduleForWeekParams) ([]*GetNFLScheduleForWeekRow, error) {
	rows, err := q.query(ctx, q.getNFLScheduleForWeekStmt, getNFLScheduleForWeek, arg.SeasonID, arg.Week)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetNFLScheduleForWeekRow{}
	for rows.Next() {
		var i GetNFLScheduleForWeekRow
		if err := rows.Scan(
			&i.ID,
			&i.Week,
			&i.HomeTeamID,
			&i.HomeTeamName,
			&i.HomeTeamAbbr,
			&i.AwayTeamID,
			&i.AwayTeamName,
			&i.AwayTeamAbbr,
			&i.HomeScore,
			&i.AwayScore,
			&i.GameDate,
			&i.GameTime,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPreviousSeasons = `-- name: GetPreviousSeasons :many
SELECT id, year, start_date, end_date, current
FROM seasons
WHERE year < (SELECT year FROM seasons WHERE current = 1)
ORDER BY year DESC
LIMIT ?
`

func (q *Queries) GetPreviousSeasons(ctx context.Context, limit int64) ([]*Season, error) {
	rows, err := q.query(ctx, q.getPreviousSeasonsStmt, getPreviousSeasons, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Season{}
	for rows.Next() {
		var i Season
		if err := rows.Scan(
			&i.ID,
			&i.Year,
			&i.StartDate,
			&i.EndDate,
			&i.Current,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSeasonById = `-- name: GetSeasonById :one
SELECT id, year, start_date, end_date, current
FROM seasons
WHERE id = ?
`

func (q *Queries) GetSeasonById(ctx context.Context, id int64) (*Season, error) {
	row := q.queryRow(ctx, q.getSeasonByIdStmt, getSeasonById, id)
	var i Season
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.StartDate,
		&i.EndDate,
		&i.Current,
	)
	return &i, err
}

const getSeasonByYear = `-- name: GetSeasonByYear :one
SELECT id, year, start_date, end_date, current
FROM seasons
WHERE year = ?
`

func (q *Queries) GetSeasonByYear(ctx context.Context, year int64) (*Season, error) {
	row := q.queryRow(ctx, q.getSeasonByYearStmt, getSeasonByYear, year)
	var i Season
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.StartDate,
		&i.EndDate,
		&i.Current,
	)
	return &i, err
}

const getTotalWeeksInSeason = `-- name: GetTotalWeeksInSeason :one
SELECT MAX(week) as total_weeks
FROM nfl_games
WHERE season_id = ?
`

func (q *Queries) GetTotalWeeksInSeason(ctx context.Context, seasonID int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getTotalWeeksInSeasonStmt, getTotalWeeksInSeason, seasonID)
	var total_weeks interface{}
	err := row.Scan(&total_weeks)
	return total_weeks, err
}

const setCurrentSeason = `-- name: SetCurrentSeason :exec
UPDATE seasons
SET current = 0
WHERE current = 1
`

func (q *Queries) SetCurrentSeason(ctx context.Context) error {
	_, err := q.exec(ctx, q.setCurrentSeasonStmt, setCurrentSeason)
	return err
}

const updateNFLGameScore = `-- name: UpdateNFLGameScore :exec
UPDATE nfl_games
SET
    home_score = ?,
    away_score = ?,
    status = ?
WHERE id = ?
`

type UpdateNFLGameScoreParams struct {
	HomeScore sql.NullInt64  `json:"home_score"`
	AwayScore sql.NullInt64  `json:"away_score"`
	Status    sql.NullString `json:"status"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateNFLGameScore(ctx context.Context, arg UpdateNFLGameScoreParams) error {
	_, err := q.exec(ctx, q.updateNFLGameScoreStmt, updateNFLGameScore,
		arg.HomeScore,
		arg.AwayScore,
		arg.Status,
		arg.ID,
	)
	return err
}

const updateSeason = `-- name: UpdateSeason :exec
UPDATE seasons
SET 
    start_date = ?,
    end_date = ?,
    current = ?
WHERE id = ?
`

type UpdateSeasonParams struct {
	StartDate string        `json:"start_date"`
	EndDate   string        `json:"end_date"`
	Current   sql.NullInt64 `json:"current"`
	ID        int64         `json:"id"`
}

func (q *Queries) UpdateSeason(ctx context.Context, arg UpdateSeasonParams) error {
	_, err := q.exec(ctx, q.updateSeasonStmt, updateSeason,
		arg.StartDate,
		arg.EndDate,
		arg.Current,
		arg.ID,
	)
	return err
}
